name: snomio-$(Date:yyyyMMdd)$(Rev:.r)_$(Build.SourceBranchName)

trigger:
  - main



schedules:
  - cron: "0 11 * * *"
    displayName: Nightly Run
    branches:
      include:
        - main
    always: true


variables:
  mavenCache: $(Pipeline.Workspace)/.m2/repository
  mavenOptions: '-Dmaven.repo.local=$(mavenCache) -Dmaven.settings.security=never'
  runIntegrationTest: $[eq(variables['Build.Reason'], 'PullRequest')]

pool:
  vmImage: ubuntu-latest

jobs:
  - job: snomio_build_only
    displayName: Compile, build  Snomio
    condition: |
      and(eq('${{ variables.runIntegrationTest }}', false), eq('${{ variables.nightlyRun }}', false))
    timeoutInMinutes: 60
    steps:
      - script: |
          if [[ "$(Build.SourceBranch)" =~ refs/heads/(.+) ]]; then
            # Direct branch build
            branchName=${BASH_REMATCH[1]}
          elif [[ "$(Build.SourceBranch)" =~ refs/pull/[0-9]+/merge ]]; then
            # Pull request build
            branchName=${SYSTEM_PULLREQUEST_SOURCEBRANCH#refs/heads/}
          else
            # Fallback or other refs
            branchName="unknown"
          fi
          branchName="$(Build.BuildNumber)_$branchName"
          branchName=${branchName//\//-}
          branchName=${branchName//#/}
          echo "##vso[task.setvariable variable=RealBranchName]$branchName"
          echo "$branchName" > branchInfo.txt
        displayName: 'Set Real Branch Name to $(RealBranchName)'

      - task: CopyFiles@2
        displayName: 'Copy branchInfo into Artifacts Dir'
        inputs:
          contents: 'branchInfo.txt'
          targetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: MavenAuthenticate@0
        inputs:
          artifactsFeeds: 'snomio'

      - task: Docker@2
        displayName: 'Login to ACR'
        inputs:
          command: login
          containerRegistry: $(containerRegistry)

      - task: Cache@2
        displayName: Cache Maven local repo
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(mavenCache)

      - task: Cache@2
        displayName: Cache node_modules
        inputs:
          key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/ui/package.json'
          path: $(Build.SourcesDirectory)/ui/node_modules
          cacheHitVar: CACHE_RESTORED

      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          options: '-DskipTests -Ddocker.registry.host=$(dockerRegistry) -Ddocker.repository=$(dockerRepository) -Djib.to.tags=$(RealBranchName) -DargLine="-Dims-username=$(imsUsername) -Dims-password=$(imsPassword)"'
          mavenOptions: '$(mavenOptions) -Xmx3072m -Dims-username=$(imsUsername) -Dims-password=$(imsPassword) -Dbuildnumber=$(RealBranchName) -DskipTests'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'package'

  - job: snomio_nightly_test
    displayName: Run nightly test
    condition: eq('${{ variables.nightlyRun }}', true)
    timeoutInMinutes: 60
    steps:
      - script: |
          cd ui
          npm install cypress --save-dev
          npm install dotenv
          export CYPRESS_BASE_URL="https://dev-snomio.ihtsdotools.org"
          export cypress_frontend_url="https://dev-snomio.ihtsdotools.org"
          export cypress_ims_username=$(imsUsername)
          export cypress_ims_password=$(imsPassword)
          export cypress_ims_url="https://dev-ims.ihtsdotools.org"
          export cypress_apUrl="https://dev-snowstorm.ihtsdotools.org"
          export cypress_apProjectKey="AUAMT"
          export cypress_apDefaultBranch="MAIN/SNOMEDCT-AU/AUAMT"
          
          npx cypress run
        displayName: 'Set environment variables and run Cypress tests'

  - job: snomio_build_test_publish
    condition: |
      and(eq('${{ variables.runIntegrationTest }}', true), eq('${{ variables.nightlyRun }}', false))
    displayName: Build, run integration test and publish
    timeoutInMinutes: 60
    pool:
      name: 'highmemory-pool'
    steps:
      - script: |
          if [[ "$(Build.SourceBranch)" =~ refs/heads/(.+) ]]; then
            # Direct branch build
            branchName=${BASH_REMATCH[1]}
          elif [[ "$(Build.SourceBranch)" =~ refs/pull/[0-9]+/merge ]]; then
            # Pull request build
            branchName=${SYSTEM_PULLREQUEST_SOURCEBRANCH#refs/heads/}
          else
            # Fallback or other refs
            branchName="unknown"
          fi
          branchName="$(Build.BuildNumber)_$branchName"
          branchName=${branchName//\//-}
          branchName=${branchName//#/}
          echo "##vso[task.setvariable variable=RealBranchName]$branchName"
          
          if [ "$(Build.SourceBranch)" = "refs/heads/main" ]; then
            echo "##vso[task.setvariable variable=imageTag]latest"
          else
            echo "##vso[task.setvariable variable=imageTag]$branchName"
          fi
          echo "$branchName" > branchInfo.txt
        displayName: 'Set image tag Name to $(imageTag)'

      - task: CopyFiles@2
        displayName: 'Copy branchInfo into Artifacts Dir'
        inputs:
          contents: 'branchInfo.txt'
          targetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: MavenAuthenticate@0
        inputs:
          artifactsFeeds: 'snomio'

      - task: Docker@2
        displayName: 'Login to ACR'
        inputs:
          command: login
          containerRegistry: $(containerRegistry)

      - task: Cache@2
        displayName: Cache Maven local repo
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(mavenCache)

      - task: Cache@2
        displayName: Cache node_modules
        inputs:
          key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/ui/package.json'
          path: $(Build.SourcesDirectory)/ui/node_modules
          cacheHitVar: CACHE_RESTORED

      - script: |
          echo "*** Create Maven Local Repo at $(mavenCache)"
          mkdir -p "$(mavenCache)"
          echo "##vso[task.setvariable variable=M2_HOME]/opt/maven"
        displayName: 'Create Maven Local Repo and set up M2_HOME'

      - task: Maven@3
        condition: eq(variables['runIntegrationTest'], 'true')
        displayName: 'Build and run integration test'
        inputs:
          mavenPomFile: 'pom.xml'
          options: '-Ddocker.registry.host=$(dockerRegistry) -Ddocker.repository=$(dockerRepository) -Djib.to.tags=$(imageTag) -DargLine="-Dims-username=$(imsUsername) -Dims-password=$(imsPassword)"'
          mavenOptions: '$(mavenOptions) -Xmx5072m -Dims-username=$(imsUsername) -Dims-password=$(imsPassword) -Dbuildnumber=$(RealBranchName)'
          javaHomeOption: 'path'
          jdkUserInputPath: '/usr/lib/jvm/java-17-openjdk-amd64'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'package'
      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage
        inputs:
          enabled: true
          codeCoverageTool: 'JaCoCo'
          summaryFileLocation: '**/target/site/jacoco/jacoco.xml'
          reportDirectory: '**/target/site/jacoco'
          additionalCodeCoverageFiles: '**/target/jacoco.exec'

      - script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v0.50.0
          trivy -v
        displayName: 'Download and install Trivy'
      - task: CmdLine@2
        displayName: "Run trivy scan on snomio"
        inputs:
          script: |
            trivy image --exit-code 0 --severity LOW,MEDIUM --scanners vuln --timeout 15m $(dockerRegistry)/$(dockerRepository):$(imageTag)
            trivy image --exit-code 1 --severity HIGH,CRITICAL --scanners vuln --timeout 15m $(dockerRegistry)/$(dockerRepository):$(imageTag)

      - task: Docker@2
        condition: succeeded()
        displayName: Push image to registry
        inputs:
          containerRegistry: $(containerRegistry)
          repository: $(containerRepository)
          command: push
          tags: |
            $(imageTag)

      - task: CmdLine@2
        displayName: Package Helm chart
        inputs:
          script: helm package --dependency-update --destination $(Build.ArtifactStagingDirectory) ./infrastructure/helm

      - task: CopyFiles@2
        displayName: 'Copy deployment script and env specific values.yaml'
        inputs:
          contents: '**/deploy/*'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
          flattenFolders: true

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: Publish Build Artifacts (Snomio Helm Chart, Deploy Script, EnvSpecific.yaml)
        artifact: snomio-helm-deploy

      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '$(mavenOptions)'
          javaHomeOption: 'path'
          jdkUserInputPath: '/usr/lib/jvm/java-17-openjdk-amd64'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          goals: 'deploy -pl .,common,auth'

  - job: sergio_tests
    displayName: Run sergio tests against snomio image
    dependsOn: snomio_build_test_publish
    condition: succeeded()
    timeoutInMinutes: 60
    steps:
      - checkout: none

      - script: |
          git clone https://github.com/aehrc/sergio.git main
          displayName: 'Checkout test repo'

      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          options: '-Ddocker.registry.host=$(dockerRegistry) -Ddocker.repository=$(dockerRepository) -DargLine="-Dims-username=$(imsUsername) -Dims-password=$(imsPassword) -Dsnomio.image.name=$(imageTag)"'
          mavenOptions: '$(mavenOptions) -Xmx3072m -Dims-username=$(imsUsername) -Dims-password=$(imsPassword)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/sergio-tests-*.xml'
          goals: 'test'






