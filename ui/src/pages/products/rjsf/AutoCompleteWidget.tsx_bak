import React, { useState, useEffect } from "react";
import { WidgetProps } from "@rjsf/core";
import { Autocomplete, CircularProgress, TextField, Typography } from "@mui/material";
import { useSearchConceptsByEcl } from "../../../hooks/api/useInitializeConcepts";
import { Concept } from "../../../types/concept.ts";

const AutoCompleteWidget = ({
                                schema,
                                uiSchema,
                                formData,
                                onChange,
                            }: WidgetProps) => {
    const { branch, ecl, showDefaultOptions } = uiSchema["ui:options"] || {};
    const [inputValue, setInputValue] = useState(""); // The input field text value
    const [options, setOptions] = useState([]); // The list of search results
    const { isLoading, allData } = useSearchConceptsByEcl(inputValue, ecl, branch, showDefaultOptions);
    // Extract title from uiSchema if available
    const title = uiSchema["ui:title"];

    // When the search results change, update the options
    useEffect(() => {
        if (allData) {
            const uniqueOptions = Array.from(
                new Map(allData.map((item) => [item.conceptId, item])).values()
            );
            setOptions(uniqueOptions);
        }
    }, [allData]);

    // Handle the change of selected product
    const handleProductChange = (selectedProduct: Concept | null) => {
        if (selectedProduct) {
            onChange(selectedProduct.conceptId); // Pass the entire selected product object back to the form
            setInputValue(selectedProduct.pt.term); // Ensure the input value matches the selected term
        } else {
            onChange(null); // Reset the value if no product is selected
            setInputValue(""); // Clear the input value
        }
    };

    // Ensure formData is not undefined, fallback to an empty object or default value
    const selectedProduct = formData ;

    // Update the input field when the selected product changes
    useEffect(() => {
        if (selectedProduct && selectedProduct.pt && selectedProduct.pt.term) {
            setInputValue(selectedProduct.pt.term); // Set the input to the selected term
        }
    }, [selectedProduct]);

    return (
        <div>
            {/* Render the title if available */}
            {title && (<Typography variant="h6" gutterBottom>{title}</Typography>)}

            {/* Autocomplete field */}
            <Autocomplete
                loading={isLoading}
                options={options}
                getOptionLabel={(option) => option?.pt?.term || ""} // Display the term as label
                value={selectedProduct || null} // Ensure a valid value is passed
                onInputChange={(event, newInputValue) => {
                    setInputValue(newInputValue); // Update the input text value as the user types
                }}
                onChange={(event, selectedValue) => handleProductChange(selectedValue)} // Pass the selected product object
                isOptionEqualToValue={(option, selectedValue) =>
                    option?.conceptId === selectedValue?.conceptId // Match based on conceptId
                }
                renderOption={(props, option) => (
                    <li {...props} key={option.conceptId}>
                        {option.pt.term} {/* Display term */}
                    </li>
                )}
                renderInput={(params) => (
                    <TextField
                        {...params}
                        label={schema.title}
                        value={inputValue} // Bind the input value to the state
                        InputProps={{
                            ...params.InputProps,
                            endAdornment: (
                                <>
                                    {isLoading ? <CircularProgress size={20} /> : null}
                                    {params.InputProps.endAdornment}
                                </>
                            ),
                        }}
                    />
                )}
            />
        </div>
    );
};

export default AutoCompleteWidget;
