///
/// Copyright 2024 Australian Digital Health Agency ABN 84 425 496 912.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///

import _ from 'lodash';

/**
 * Utility class for converting between RJSF IDs and Lodash paths
 * and for interacting with formData and uiSchema objects using these paths.
 */
export class RjsfUtils {
  /**
   * Converts an RJSF ID string (dot notation with underscores for arrays)
   * into a Lodash-compatible path array or string.
   *
   * Examples:
   * 'root_firstName' -> 'firstName'
   * 'root_address_street' -> 'address.street'
   * 'root_items_0_name' -> 'items[0].name'
   * 'root_items_0' -> 'items[0]'
   * 'root_items_0_details_ingredients_1' -> 'items[0].details.ingredients[1]'
   *
   * @param {string} rjsfId The ID string generated by RJSF.
   * @returns {string} A Lodash-compatible path string.
   * @private
   */
  public static rjsfIdToFormDataPath(rjsfId: string): string {
    // Remove the leading 'root_'
    const path = rjsfId.replace(/^root_/, '');

    // Replace array index underscores with dot-bracket notation
    // e.g., '_0_field' -> '[0].field'
    // Handles cases like 'array_0' -> 'array[0]'
    // The second replace cleans up potential dots left before brackets
    return path
      .replace(/_(\d+)/g, '[$1]')
      .replace(/\.\B/g, '')
      .replace(/_/g, '.');
  }

  public static rjsfIdToUiSchemaPath(rjsfId: string): string {
    // Remove the leading 'root_'
    const path = rjsfId.replace(/^root_/, '');

    // Replace array index underscores with dot-bracket notation
    // e.g., '_0_field' -> '[0].field'
    // Handles cases like 'array_0' -> 'array[0]'
    // The second replace cleans up potential dots left before brackets
    return path
      .replace(/_(\d+)/g, '_items')
      .replace(/\.\B/g, '')
      .replace(/_/g, '.');
  }

  public static getParentIdOrPath(idOrPath: string): string {
    return idOrPath.replace(/^(.*)(\.|_)[^._]+$/g, '$1');
  }

  /**
   * Converts a Lodash path (string or array) into an RJSF ID string.
   *
   * Examples:
   * 'firstName' -> 'root_firstName'
   * 'address.street' -> 'root_address_street'
   * 'items[0].name' -> 'root_items_0_name'
   * ['items', 0, 'name'] -> 'root_items_0_name'
   * 'items[0]' -> 'root_items_0'
   * 'items[0].details.ingredients[1]' -> 'root_items_0_details_ingredients_1'
   *
   * @param {string|Array<string|number>} lodashPath The Lodash path.
   * @returns {string} An RJSF ID string.
   */
  public static formDataPathToRjsfId(
    formDataPath: string | Array<string | number>,
  ): string {
    // If the path is an array, join it into a dot-notation string first
    const pathStr = _.isArray(formDataPath)
      ? formDataPath.join('.')
      : formDataPath;

    // Convert bracket notation [index] to underscore notation _index
    // Handle cases where bracket is at the start of a segment (e.g., array[0].field)
    // and cases where it follows a segment (e.g., object.array[0].field)
    const rjsfPath = pathStr
      .replace(/\[(\d+)]/g, '_$1') // Replace [index] with _index globally
      .replace(/\./g, '_'); // Clean up any stray dots that might appear before the underscore

    // Add the 'root_' prefix
    return `root_${rjsfPath}`;
  }

  /**
   * Resolves a relative path (e.g. "../../name") against a base path,
   * supporting both RJSF-style IDs (with underscores) and dot-notation.
   *
   * @param idOrPath - The base path (or Id), either in RJSF ID format or dot notation.
   * @param relativePath - A relative path like "../../field"
   * @returns The resolved absolute path, in the same format as basePath.
   */
  public static resolveRelativeIdOrPath(
    idOrPath: string,
    relativePath: string,
  ): string {
    const isRjsfStyle = idOrPath.startsWith('root') && idOrPath.includes('_');

    const delimiter = isRjsfStyle ? '_' : '.';
    const baseSegments = idOrPath.split(delimiter);
    const relativeSegments = relativePath.split('/');

    const stack: string[] = [...baseSegments];

    for (const segment of relativeSegments) {
      if (segment === '..') {
        stack.pop();
      } else if (segment !== '.' && segment !== '') {
        stack.push(segment);
      }
    }

    return stack.join(delimiter);
  }

  /**
   * Retrieves a value from the formData object using an RJSF ID.
   *
   * @param rootUiSchema The form data object.
   * @param rjsfId The RJSF field ID in dot notation (e.g., 'root_fieldName').
   * @returns {*} The value at the specified path, or undefined if not found.
   */
  public static getFormDataById(rootUiSchema: any, rjsfId: string): any {
    const lodashPath = RjsfUtils.rjsfIdToFormDataPath(rjsfId);
    return _.get(rootUiSchema, lodashPath);
  }

  /**
   * Sets a value in the formData object using an RJSF ID.
   * Returns a new formData object to maintain immutability.
   *
   * @param rootUiSchema The form data object.
   * @param rjsfId The RJSF field ID in dot notation.
   * @param value The value to set.
   */
  public static setFormDataById(
    rootUiSchema: any,
    rjsfId: string,
    value: any,
  ): any {
    const lodashPath = RjsfUtils.rjsfIdToFormDataPath(rjsfId);
    // Use _.set with a clone to avoid mutating the original formData
    // const newFormData = _.cloneDeep(formContext.formData);
    _.set(rootUiSchema, lodashPath, value);
  }

  /**
   * Retrieves a value from the uiSchema object using an RJSF ID.
   * Note: uiSchema paths directly mirror the schema structure, typically without
   * array indices in the path itself unless specifically defined in uiSchema.
   * However, the rjsfIdToLodashPath function handles the conversion correctly
   * for accessing nested UI configurations corresponding to the formData path.
   *
   * @param rootUiSchema The uiSchema object.
   * @param rjsfId The RJSF field ID in dot notation.
   * @returns {*} The uiSchema configuration at the specified path, or undefined if not found.
   */
  public static getUiSchemaById(rootUiSchema: any, rjsfId: string): any {
    // The path for uiSchema is slightly different; it follows the schema structure
    // not the formData instance path exactly, especially for arrays where uiSchema
    // might define template/item-level UI.
    // However, if uiSchema *does* have specific config per index (less common),
    // the rjsfIdToLodashPath logic still points to the correct nested object/array element.
    // For typical uiSchema (defining UI for the *item* in an array),
    // you might look for path like 'items.ui:field' rather than 'items[0].ui:field'.
    // The rjsfIdToLodashPath gives us the data path. We'll use that.
    const lodashPath = RjsfUtils.rjsfIdToUiSchemaPath(rjsfId);
    // uiSchema often uses 'ui:options', 'ui:widget', etc.
    // If you want to get a specific ui property, you'd append it to the RJSF ID
    // before passing it here, or get the object and access the property.
    // For simplicity, this function gets the nested uiSchema object for the path.
    // You might need to refine this depending on exactly what uiSchema config you want.
    return _.get(rootUiSchema, lodashPath);
  }

  /**
   * Sets a uiSchema configuration using an RJSF ID.
   * Returns a new uiSchema object to maintain immutability.
   *
   * @param uiSchema The uiSchema object.
   * @param rjsfId The RJSF field ID in dot notation.
   * @param value The uiSchema configuration object or value to set.
   */
  public static setUiSchemaById(
    rootUiSchema: any,
    rjsfId: string,
    value: any,
  ): any {
    const lodashPath = RjsfUtils.rjsfIdToUiSchemaPath(rjsfId);
    _.set(rootUiSchema, lodashPath, value);
  }
}
