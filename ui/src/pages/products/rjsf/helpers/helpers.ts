///
/// Copyright 2024 Australian Digital Health Agency ABN 84 425 496 912.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///

import _ from 'lodash';

export const getItemTitle = (
  uiSchema: any,
  formData: any,
  index: number,
  defaultTitle = 'Untitled',
) => {
  const titleSource = uiSchema.items?.['ui:options']?.titleSource;
  if (uiSchema.items?.['ui:options']?.defaultTitle) {
    defaultTitle = uiSchema.items?.['ui:options']?.defaultTitle;
  }
  return titleSource && formData && formData[index]
    ? _.get(formData[index], titleSource) || `${defaultTitle} ${index + 1}`
    : `${defaultTitle} ${index + 1}`;
};
export function getFieldName(idSchema: any) {
  return rjsfIdToLodashPath(idSchema.$id);
}
export function getParentPath(fullPath: string) {
  const match = rjsfIdToLodashPath(fullPath).match(/^(.*)\.[^.]+$/);
  return match ? match[1] : fullPath;
}
// Function to get uiSchema path
export function getUiSchemaPath(fieldPath: string) {
  const parts = fieldPath.split('.');
  const uiSchemaParts = parts.map(part => {
    // Check if the part ends with [index], e.g., "containedProducts[0]"
    const match = part.match(/^(.*)\[\d+]$/);
    if (match) {
      // Return the base name followed by "items"
      return `${match[1]}.items`;
    }
    return part; // No array index, return unchanged
  });
  return uiSchemaParts.join('.').replaceAll('0', 'items');
}

/**
 * Converts an RJSF ID string (dot notation with underscores for arrays)
 * into a Lodash-compatible path array or string.
 *
 * Examples:
 * 'root_firstName' -> 'firstName'
 * 'root_address_street' -> 'address.street'
 * 'root_items_0_name' -> 'items[0].name'
 * 'root_items_0' -> 'items[0]'
 * 'root_items_0_details_ingredients_1' -> 'items[0].details.ingredients[1]'
 *
 * @param {string} rjsfId The ID string generated by RJSF.
 * @returns {string|Array<string|number>} A Lodash-compatible path.
 */
const rjsfIdToLodashPath = (rjsfId: string) => {
  // Remove the leading 'root_'
  const path = rjsfId.replace(/^root_/, '');

  // Replace array index underscores with dot-bracket notation
  // e.g., '_0_field' -> '[0].field'
  // Handles cases like 'array_0' -> 'array[0]'
  return path.replace(/_(\d+)/g, '[$1]').replace(/\.\B/g, ''); // Replace `.` not followed by word characters (like in `.[0]`)
};

/**
 * Converts a Lodash path (string or array) into an RJSF ID string.
 *
 * Examples:
 * 'firstName' -> 'root_firstName'
 * 'address.street' -> 'root_address_street'
 * 'items[0].name' -> 'root_items_0_name'
 * ['items', 0, 'name'] -> 'root_items_0_name'
 * 'items[0]' -> 'root_items_0'
 * 'items[0].details.ingredients[1]' -> 'root_items_0_details_ingredients_1'
 *
 * @param {string|Array<string|number>} lodashPath The Lodash path.
 * @returns {string} An RJSF ID string.
 */
const lodashPathToRjsfId = (lodashPath: string) => {
  // If the path is an array, join it into a dot-notation string first
  const pathStr = _.isArray(lodashPath) ? lodashPath.join('.') : lodashPath;

  // Convert bracket notation [index] to underscore notation _index
  // Handle cases where bracket is at the start of a segment (e.g., array[0].field)
  // and cases where it follows a segment (e.g., object.array[0].field)
  const rjsfPath = pathStr
    .replace(/\[(\d+)\]/g, '_$1') // Replace [index] with _index globally
    .replace(/\._/g, '_'); // Clean up any stray dots that might appear before the underscore

  // Add the 'root_' prefix
  return `root_${rjsfPath}`;
};

/**
 * Retrieves a value from the formData object using an RJSF ID.
 *
 * @param rootFormData
 * @param {string} rjsfId The RJSF field ID in dot notation (e.g., 'root_fieldName').
 * @returns {*} The value at the specified path, or undefined if not found.
 */
export const getFormDataById = (rootFormData: any, rjsfId: string) => {
  const lodashPath = rjsfIdToLodashPath(rjsfId);
  return _.get(rootFormData, lodashPath);
};

/**
 * Sets a value in the formData object using an RJSF ID.
 * Returns a new formData object to maintain immutability.
 *
 * @param {object} rootFormData The form data object.
 * @param {string} rjsfId The RJSF field ID in dot notation.
 * @param {*} value The value to set.
 * @returns {object} A new formData object with the value set.
 */
export const setFormDataById = (
  rootFormData: any,
  rjsfId: string,
  value: any,
) => {
  const lodashPath = rjsfIdToLodashPath(rjsfId);
  // Use _.set with a clone to avoid mutating the original formData
  const newFormData = _.cloneDeep(rootFormData);
  _.set(newFormData, lodashPath, value);
  return newFormData;
};

/**
 * Retrieves a value from the uiSchema object using an RJSF ID.
 * Note: uiSchema paths directly mirror the schema structure, typically without
 * array indices in the path itself unless specifically defined in uiSchema.
 * However, the rjsfIdToLodashPath function handles the conversion correctly
 * for accessing nested UI configurations corresponding to the formData path.
 *
 * @param {object} rootUiSchema The uiSchema object.
 * @param {string} rjsfId The RJSF field ID in dot notation.
 * @returns {*} The uiSchema configuration at the specified path, or undefined if not found.
 */
export const getUiSchemaById = (rootUiSchema: any, rjsfId: string) => {
  // The path for uiSchema is slightly different; it follows the schema structure
  // not the formData instance path exactly, especially for arrays where uiSchema
  // might define template/item-level UI.
  // However, if uiSchema *does* have specific config per index (less common),
  // the rjsfIdToLodashPath logic still points to the correct nested object/array element.
  // For typical uiSchema (defining UI for the *item* in an array),
  // you might look for path like 'items.ui:field' rather than 'items[0].ui:field'.
  // The rjsfIdToLodashPath gives us the data path. We'll use that.
  const lodashPath = rjsfIdToLodashPath(rjsfId);
  // uiSchema often uses 'ui:options', 'ui:widget', etc.
  // If you want to get a specific ui property, you'd append it.
  // For simplicity, this function gets the nested uiSchema object for the path.
  // You might need to refine this depending on exactly what uiSchema config you want.
  return _.get(rootUiSchema, lodashPath);
};

/**
 * Sets a uiSchema configuration using an RJSF ID.
 * Returns a new uiSchema object to maintain immutability.
 *
 * @param {object} rootUiSchema The uiSchema object.
 * @param {string} rjsfId The RJSF field ID in dot notation.
 * @param {*} value The uiSchema configuration object or value to set.
 * @returns {object} A new uiSchema object with the configuration set.
 */
export const setUiSchemaById = (
  rootUiSchema: any,
  rjsfId: string,
  value: any,
) => {
  const lodashPath = rjsfIdToLodashPath(rjsfId);
  // Use _.set with a clone to avoid mutating the original uiSchema
  const newUiSchema = _.cloneDeep(rootUiSchema);
  _.set(newUiSchema, lodashPath, value);
  return newUiSchema;
};
