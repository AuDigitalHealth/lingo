{{- $releaseName := .Release.Name }}
{{- $snowStormApiPath := .Values.snomio.snowstorm.apiPath }}
{{- $defaultBranch := .Values.snomio.snowstorm.defaultBranch }}
{{- $authoringServices := index .Values.snomio.config "ihtsdo.ap.api.url" }}
{{- $snowstormHost := $.Values.snomio.snowstorm.host }}
{{- $snowstormPort := $.Values.snomio.snowstorm.port }}
{{- $cookieName := $.Values.snomio.ims_cookie_name }}
{{- $otelCollector := printf "%s-collector.%s.svc.cluster.local" .Release.Name .Release.Namespace }}
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-ingress
  labels:
    app: {{ .Release.Name }}
  annotations:
    {{- if .Values.certmanager.enabled }}
    cert-manager.io/cluster-issuer: letsencrypt
    cert-manager.io/issue-temporary-certificate: "true" # temporary cert required for nginx to be able to reload
    acme.cert-manager.io/http01-edit-in-place: "true" # important to merge with existing ingress resource into a single nginx config file
    {{- end }}
    nginx.org/proxy-connect-timeout: "300s"
    nginx.org/proxy-read-timeout: "300s"
    nginx.org/redirect-to-https: "{{ .Values.ingress.nginx.sslRedirect }}"
    ingress.kubernetes.io/ssl-redirect: "{{ .Values.ingress.nginx.sslRedirect }}"
    nginx.org/location-snippets: |
        opentracing_propagate_context;
        proxy_set_header X-B3-TraceId $opentracing_context_x_b3_traceid;
        proxy_set_header X-B3-SpanId $opentracing_context_x_b3_spanid;
        proxy_set_header X-B3-ParentSpanId $opentracing_context_x_b3_parentspanid;
        proxy_set_header X-B3-Sampled $opentracing_context_x_b3_sampled;
        proxy_set_header X-B3-Flags $opentracing_context_x_b3_flags;

    nginx.org/server-snippets: |
        rewrite ^/api/branch/(.*)  /api/{{ $defaultBranch }}/$1 last;
        location /authoring-services/ {
            proxy_set_header Upgrade $http_upgrade;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_socket_keepalive on;
            proxy_set_header Host $host;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
            proxy_pass {{ $authoringServices }}/;
        }
        location /snowstorm {
            rewrite ^/snowstorm/branch/(.*) /snowstorm/{{ $defaultBranch }}/$1 last;
            proxy_set_header Upgrade $http_upgrade;
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_socket_keepalive on;
            proxy_set_header Host {{ $snowstormHost }};
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
            proxy_ssl_server_name on;
            proxy_ssl_name {{ $snowstormHost }};
            proxy_pass https://{{ $snowstormHost }}{{ $snowStormApiPath }};
        }
spec:
  ingressClassName:  {{ .Values.ingress.class }}
  tls:
    - hosts:
    {{- range.Values.snomio.hostNames }}
        - {{. }}
    {{- end }}
      secretName: {{ .Values.ingress.tlsSecretName }}
  rules:
    {{- range.Values.snomio.hostNames }}
    - host: {{ . }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ $releaseName }}-service
                port:
                  number: 80
    {{- end }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-nginx-ingress
  labels:
    app: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": post-upgrade,post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  log-format: >-
    {"time_local":"$time_local","remote_addr":"$remote_addr","user":"$decoded_username", "status":"$status","request":"$request","proxy_host":"$proxy_host","trace_id":"$opentracing_context_x_b3_traceid","request_method":"$request_method","http_referer":"$http_referer","http_x_forwarded_for":"$http_x_forwarded_for","http_host":"$http_host","request_uri":"$request_uri","upstream_addr":"$upstream_addr","upstream_response_time":"$upstream_response_time","upstream_status":"$upstream_status","scheme":"$scheme"}
{{- if $.Values.snomio.telemetry.enabled }}
  http-snippets: |
    map $http_cookie $encoded_username {
      "~*{{ $cookieName }}=.*AAAAAAAIAC([A-Za-z0-9+/=]+)" $1;
    }
    map $encoded_username $decoded_username {
      "~*([A-Za-z0-9+/=]+)" $1;
    }
    opentracing_tag endpoint $request_uri;
    opentracing_tag user $decoded_username;
  opentracing: "True"
  opentracing-tracer: /usr/local/lib/libzipkin_opentracing_plugin.so
  opentracing-tracer-config: |
    {
      "service_name": "{{ $releaseName }}/nginx-ingress",
      "collector_host": "{{ $otelCollector }}",
      "collector_port": 9411
    }
{{- end }}
