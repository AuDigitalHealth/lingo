name: snomio-$(Date:yyyyMMdd)$(Rev:.r)_$(Build.SourceBranchName)

trigger:
  branches:
    include:
      - main
  tags:
    include:
      - '*'

variables:
  mavenCache: $(Pipeline.Workspace)/.m2/repository
  mavenOptions: '-Dmaven.repo.local=$(mavenCache) -Dmaven.settings.security=never'

resources:
  repositories:
    - repository: sergio
      type: github
      name: aehrc/sergio
      endpoint: aehrc
      ref: rabbit-snomio-image-as-cli-entity-refactor

pool:
  vmImage: ubuntu-latest

jobs:
  - job: set_image_tag
    displayName: Set Image Tag
    steps:
      - script: |
          if [[ "$(Build.SourceBranch)" =~ refs/heads/(.+) ]]; then
            # Direct branch build
            postfix=""
          elif [[ "$(Build.SourceBranch)" =~ refs/pull/[0-9]+/merge ]]; then
            postfix="_${SYSTEM_PULLREQUEST_SOURCEBRANCH#refs/heads/}"
          elif [[ "$(Build.SourceBranch)" =~ refs/tags/(.+) ]]; then
            postfix="_${BASH_REMATCH[1]}"
          else
            postfix="_unknown"
          fi
          imageTag="$(Build.BuildNumber)$postfix"
          imageTag=${imageTag//\//-}
          imageTag=${imageTag//#/}
          echo "##vso[task.setvariable variable=imageTag]$imageTag"
          echo "$imageTag" > branchInfo.txt
        displayName: 'Set Image Tag and Save to File'

      - task: CopyFiles@2
        displayName: 'Copy branchInfo.txt to Artifacts Dir'
        inputs:
          contents: 'branchInfo.txt'
          targetFolder: '$(Build.ArtifactStagingDirectory)'

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: Publish branchInfo.txt
        artifact: branchInfo

  # - job: snomio_build_test_publish
  #   dependsOn: set_image_tag
  #   displayName: Build, run integration test and publish
  #   timeoutInMinutes: 60
  #   pool:
  #     name: 'highmemory-pool'
  #   steps:
  #     - download: current
  #       artifact: branchInfo

  #     - script: |
  #         imageTag=$(cat $(Pipeline.Workspace)/branchInfo/branchInfo.txt)
  #         if [[ -z "$imageTag" || "$imageTag" == *unknown* ]]; then
  #           echo "Invalid imageTag: $imageTag"
  #           exit 1
  #         fi
  #         echo "##vso[task.setvariable variable=buildInfo]$imageTag"
  #         if [ "$(Build.SourceBranch)" = "refs/heads/main" ]; then
  #           imageTag="$imageTag,latest"
  #         fi
  #         echo "##vso[task.setvariable variable=imageTag]$imageTag"
  #         echo "Using imageTag: $imageTag"
  #       displayName: 'Read imageTag from branchInfo.txt'

  #     - task: MavenAuthenticate@0
  #       inputs:
  #         artifactsFeeds: 'snomio'

  #     - task: Docker@2
  #       displayName: 'Login to ACR'
  #       inputs:
  #         command: login
  #         containerRegistry: $(containerRegistry)

  #     - task: Cache@2
  #       displayName: Cache Maven local repo
  #       inputs:
  #         key: 'maven | "$(Agent.OS)" | **/pom.xml'
  #         restoreKeys: |
  #           maven | "$(Agent.OS)"
  #           maven
  #         path: $(mavenCache)

  #     - task: Cache@2
  #       displayName: Cache node_modules
  #       inputs:
  #         key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/ui/package.json'
  #         path: $(Build.SourcesDirectory)/ui/node_modules
  #         cacheHitVar: CACHE_RESTORED

  #     - script: |
  #         echo "*** Create Maven Local Repo at $(mavenCache)"
  #         mkdir -p "$(mavenCache)"
  #         echo "##vso[task.setvariable variable=M2_HOME]/opt/maven"
  #       displayName: 'Create Maven Local Repo and set up M2_HOME'

  #     - task: Maven@3
  #       displayName: 'Build and run integration test'
  #       inputs:
  #         mavenPomFile: 'pom.xml'
  #         options: '-DskipTests -Dsnomio.extensions.sergio.enabled=false -Dlingo.internal.users=$(imsUsername) -Ddocker.registry.host=$(dockerRegistry) -Ddocker.repository=$(dockerRepository) -Djib.to.tags=$(imageTag) -DargLine="-Dims-username=$(imsUsername) -Dims-password=$(imsPassword)  -DskipTests"'
  #         mavenOptions: '$(mavenOptions) -Xmx5072m -Dims-username=$(imsUsername) -Dims-password=$(imsPassword) -Dbuildnumber=$(buildInfo) -DskipTests'
  #         javaHomeOption: 'path'
  #         jdkUserInputPath: '/usr/lib/jvm/java-17-openjdk-amd64'
  #         jdkArchitectureOption: 'x64'
  #         publishJUnitResults: true
  #         testResultsFiles: '**/surefire-reports/TEST-*.xml'
  #         goals: 'package -DskipTests'
  #     - task: PublishCodeCoverageResults@1
  #       displayName: Publish Code Coverage
  #       inputs:
  #         enabled: true
  #         codeCoverageTool: 'JaCoCo'
  #         summaryFileLocation: '**/target/site/jacoco/jacoco.xml'
  #         reportDirectory: '**/target/site/jacoco'
  #         additionalCodeCoverageFiles: '**/target/jacoco.exec'

      # - script: |
      #     curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v0.50.0
      #     trivy -v
      #   displayName: 'Download and install Trivy'
      # - task: CmdLine@2
      #   displayName: "Run trivy scan on snomio"
      #   inputs:
      #     script: |
      #       trivy image --exit-code 0 --severity LOW,MEDIUM --scanners vuln --timeout 15m $(dockerRegistry)/$(dockerRepository):$(buildInfo)
      #       trivy image --exit-code 1 --severity HIGH,CRITICAL --scanners vuln --timeout 15m $(dockerRegistry)/$(dockerRepository):$(buildInfo)

      # - task: Maven@3
      #   inputs:
      #     mavenPomFile: 'pom.xml'
      #     mavenOptions: '$(mavenOptions)'
      #     javaHomeOption: 'path'
      #     jdkUserInputPath: '/usr/lib/jvm/java-17-openjdk-amd64'
      #     jdkArchitectureOption: 'x64'
      #     publishJUnitResults: false
      #     goals: 'deploy -pl .,common,auth'
  
  - job: e2e_tests
    displayName: Run e2e Tests
    timeoutInMinutes: 60
    pool:
      name: 'highmemory-pool'
    #container:
    #  image: nctsacr.azurecr.io/cypress-image:latest
    #  endpoint: ncts-acr
    #  options: --privileged -v /var/run/docker.sock:/var/run/docker.sock
    variables:
      agent.container.startupTimeout: '300' 
    dependsOn: 
      - set_image_tag
      # - snomio_build_test_publish
    steps:
      - download: current
        artifact: branchInfo

      - script: |
          imageTag=$(cat $(Pipeline.Workspace)/branchInfo/branchInfo.txt)
          if [[ -z "$imageTag" || "$imageTag" == *unknown* ]]; then
            echo "Invalid imageTag: $imageTag"
            exit 1
          fi
          echo "##vso[task.setvariable variable=buildInfo]$imageTag"
          if [ "$(Build.SourceBranch)" = "refs/heads/main" ]; then
            imageTag="$imageTag,latest"
          fi
          echo "##vso[task.setvariable variable=imageTag]$imageTag"
          echo "Using imageTag: $imageTag"
        displayName: 'Read imageTag from branchInfo.txt'

      - task: UseNode@1
        inputs:
          version: '20.x'
        displayName: "Install Node.js 20 using Node.js Tool"

      - task: Docker@2
        displayName: 'Login to ACR'
        inputs:
          command: login
          containerRegistry: $(containerRegistry)

      - script: |
          set -e
          
          cd $(Build.SourcesDirectory)
          # Modify docker compose 
          # sed -i 's/nctsacr.azurecr.io\/snomio:latest/nctsacr.azurecr.io\/snomio:$(imageTag)/' ui/cypress/docker/docker-compose.yaml
          sed -i 's/nctsacr.azurecr.io\/snomio:latest/nctsacr.azurecr.io\/snomio:snomio-20241212.2_merge_fix-e2e-tests/' ui/cypress/docker/docker-compose.yaml
          sed -i 's/ims-username=.*/ims-username=$(imsUsername)/' ui/cypress/docker/docker-compose.yaml
          

          PASSWORD="$IMSPASSWORD"

          CISSPASSWORD="$CISPASSWORD"

          # Escape special characters in the password for sed
          escapedPassword=$(printf '%s\n' "$PASSWORD" | sed -e 's/[&/\]/\\&/g')
          escapedCisPassword=$(printf '%s\n' "$CISSPASSWORD" | sed -e 's/[&/\]/\\&/g')

          # Step 3: Use `sed` to replace the ims-password line in the Docker file
          sed -i "s|ims-password=.*|ims-password=${escapedPassword}|" ui/cypress/docker/docker-compose.yaml
          sed -i 's/cis.password=.*/cis.password=$(escapedCisPassword)/' ui/cypress/docker/docker-compose.yaml

          sed -i 's/snomio.jira.users=.*/snomio.jira.users=$(imsUsername)/' ui/cypress/docker/docker-compose.yaml

          # Generate SSL certificates
          openssl req -x509 -nodes -newkey rsa:2048 -keyout ui/cypress/docker/key.pem -out ui/cypress/docker/cert.pem -days 365 -subj "/C=AU/ST=QLD/L=Brisbane/O=CSIRO/OU=CSIRO Department/CN=snomio"

          cd ui/cypress/docker
          ls -lah

          snomioconf_path=$(readlink -f ./snomio.conf)
          key_path=$(readlink -f key.pem)
          cert_path=$(readlink -f cert.pem)
          sed -i "s|./snomio.conf|$snomioconf_path|" docker-compose.yaml
          sed -i "s|./key.pem|$key_path|" docker-compose.yaml
          sed -i "s|./cert.pem|$cert_path|" docker-compose.yaml
          cat docker-compose.yaml

          docker compose up -d

          # # Wait for containers to be healthy
          echo "Waiting for containers to be ready..."
          timeout=300  # 5 minutes timeout
          elapsed=0
          interval=10  # Check every 10 seconds

          mountedfile=$(docker compose config | grep 'source:' | grep "snomio.conf" | sed -E 's/.*source: (.*)/\1/')
          echo "#### Mounted conf is $mountedfile"
          cat $mountedfile

          while [ $elapsed -lt $timeout ]; do
              if docker compose ps | grep -q "healthy"; then
                  echo "Containers are ready!"
                  docker compose ps -a
                  docker compose run nginx nginx -t
                  exit 0
              fi
              sleep $interval
              elapsed=$((elapsed + interval))
              echo "Still waiting... ($elapsed seconds elapsed)"
          done

          echo "Timeout reached waiting for containers"
          docker compose ps -a
          docker compose logs
          cd ../../../
          exit 1
        env: 
          IMSPASSWORD: $(imsPassword)
          CISPASSWORD: $(cisPassword)

      - script: |
          # Add entry to hosts file
          echo "127.0.0.1 local-snomio.ihtsdotools.org" | sudo tee -a /etc/hosts
          
          cat /etc/hosts
          
          node --version
          npm --version
          
          cd ui

          npm install cypress --save-dev
          npm install dotenv
          export CYPRESS_BASE_URL="https://local-snomio.ihtsdotools.org:443"
          export cypress_frontend_url="https://local-snomio.ihtsdotools.org:443"
          export cypress_ims_username="$IMSUSERNAME"
          export cypress_ims_password="$IMSPASSWORD"
          export cypress_ims_url="https://dev-ims.ihtsdotools.org"
          export cypress_apUrl="https://dev-snowstorm.ihtsdotools.org"
          export cypress_apProjectKey="AUAMT"
          export cypress_apDefaultBranch="MAIN/SNOMEDCT-AU/AUAMT"         
          
          npx cypress run --headless --spec "cypress/e2e/"
        displayName: 'Set environment variables and run Cypress tests'
        env:
          IMSUSERNAME: $(imsUsername)
          IMSPASSWORD: $(imsPassword)


      # - script: |
      #     echo "*** Create Maven Local Repo at $(mavenCache)"
      #     mkdir -p "$(mavenCache)"
      #     echo "##vso[task.setvariable variable=M2_HOME]/opt/maven"
      #   displayName: 'Create Maven Local Repo and set up M2_HOME'

      # - task: Maven@3
      #   displayName: 'Build and run integration test'
      #   inputs:
      #     mavenPomFile: 'pom.xml'
      #     options: '-Dsnomio.extensions.sergio.enabled=false -Dlingo.internal.users=$(imsUsername) -Ddocker.registry.host=$(dockerRegistry) -Ddocker.repository=$(dockerRepository) -Djib.to.tags=$(imageTag) -DargLine="-Dims-username=$(imsUsername) -Dims-password=$(imsPassword)"'
      #     mavenOptions: '$(mavenOptions) -Xmx5072m -Dims-username=$(imsUsername) -Dims-password=$(imsPassword) -Dbuildnumber=$(buildInfo)'
      #     javaHomeOption: 'path'
      #     jdkUserInputPath: '/usr/lib/jvm/java-17-openjdk-amd64'
      #     jdkArchitectureOption: 'x64'
      #     publishJUnitResults: true
      #     testResultsFiles: '**/surefire-reports/TEST-*.xml'
      #     goals: 'package'
      # - task: PublishCodeCoverageResults@1
      #   displayName: Publish Code Coverage
      #   inputs:
      #     enabled: true
      #     codeCoverageTool: 'JaCoCo'
      #     summaryFileLocation: '**/target/site/jacoco/jacoco.xml'
      #     reportDirectory: '**/target/site/jacoco'
      #     additionalCodeCoverageFiles: '**/target/jacoco.exec'
      # - task: Maven@3
      #   inputs:
      #     mavenPomFile: 'pom.xml'
      #     mavenOptions: '$(mavenOptions)'
      #     javaHomeOption: 'path'
      #     jdkUserInputPath: '/usr/lib/jvm/java-17-openjdk-amd64'
      #     jdkArchitectureOption: 'x64'
      #     publishJUnitResults: false
      #     goals: 'deploy -pl .,common,auth'

      - task: PublishPipelineArtifact@1
        condition: succeededOrFailed()
        inputs:
          targetPath: $(Build.SourcesDirectory)/ui/cypress/screenshots
          artifact: cypress-screenshots
          publishLocation: pipeline
        displayName: 'Publish Cypress screenshots '

      - task: PublishPipelineArtifact@1
        condition: succeededOrFailed()
        inputs:
          targetPath: $(Build.SourcesDirectory)/ui/cypress/videos
          artifact: cypress-videos
          publishLocation: pipeline
        displayName: 'Publish Cypress video '